{"version":3,"sources":["assets/images/nav_before.png","assets/images/edit_icon.png","assets/images/save_icon.png","assets/images/nav_next.png","components/title/title.js","api/api.js","actions/actionCreator.js","constants.js","components/login/loginForm.js","components/login/login.js","components/task-list/FormAddNewTask.js","components/item-task/task-item.js","components/task-list/task-list.js","components/footer/footer.js","components/pagination/pagination.js","components/pagination/pagination-container.js","components/task/task.js","components/task/task-container.js","App.js","serviceWorker.js","reducers/taskReducer.js","reducers/filterReducer.js","reducers/authReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","Title","title","className","defaultProp","instance","axios","create","baseURL","taskApi","pageNumber","get","then","response","data","form","post","id","authApi","getTasks","payload","type","setCurrentPage","currentPage","setUserData","login","token","isAuth","errorLogin","errorData","getTasksThunkCreator","PageNumber","dispatch","a","status","message","console","error","LoginForm","onClickFormLoginBtn","loginInput","pasInput","handlerInputChange","onSubmit","name","placeholder","onChange","value","Login","onClickLoginBtn","onClick","FormAddNewTask","state","addTask","username","usernameInp","email","emailInp","text","textTaskInp","TaskItem","saveEditTask","handlerEditMode","isEditMode","idEditTask","checked","disabled","src","iconSave","iconEdit","defaultProps","TaskList","tasks","changeAddTaskMode","map","isAddNewTask","addNewTaskInput","FILTER_BTN","Footer","totalTaskCount","activeFilter","changeFilter","key","Pagination","pages","stepNumber","setStepNumber","stepCount","leftStepPageNumber","rightStepPageNumber","onPageChange","navBefore","filter","p","navNext","connect","store","pageSize","taskReducer","stepSizes","pagesCount","Math","ceil","i","push","useState","Task","props","filterTasks","filterReducer","isTasksExist","length","filteredTasks","TaskContainer","initializeState","setState","target","event","preventDefault","addNewTaskThunkCreator","saveEditTaskThunkCreator","loginThunkCreator","this","Component","authReducer","FormData","append","password","App","Boolean","window","location","hostname","match","TASKS_start","action","total_task_count","initialState","rootReducer","combineReducers","compose","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.95b52630.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nav_before.67166eb1.png\";","module.exports = __webpack_public_path__ + \"static/media/edit_icon.936f8885.png\";","module.exports = __webpack_public_path__ + \"static/media/save_icon.bf13633a.png\";","module.exports = __webpack_public_path__ + \"static/media/nav_next.1fa82738.png\";","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './title.css';\n\nconst Title = ({title}) => (\n    <h1 className='tasks__title'>{title}</h1>\n)\n\nTitle.propTypes = {\n    title: PropTypes.string,\n}\n\nTitle.defaultProp = {\n    title: 'List Task',\n}\n\nexport default Title;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://uxcandy.com/~shapoval/test-task-backend/v2/',\n})\n\nexport const taskApi = {\n    getTasks (pageNumber = 1) {\n        return instance.get(`?developer=Test&page=${pageNumber}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    addNewTask (form)  {\n        return instance.post(`create?developer=Test`, form)\n            .then(response => {\n            return response.data\n        })\n    },\n\n    saveEditTask (id, form)  {\n        return instance.post(`edit/${id}?developer=Test`, form)\n            .then(response => {\n                return response.data\n        })\n    },\n}\n\nexport const authApi = {\n    login (form) {\n        return instance.post(`login?developer=Test`, form )\n            .then(response => {\n                return response.data\n            })\n    }\n}\n\n\n","import {\n    CHANGE_FILTER,\n    GET_TASKS,\n    SET_CURRENT_PAGE,\n    SET_USER_DATA,\n    ERROR_LOGIN, ERROR_DATA,\n} from \"../constants\";\n\nimport {authApi, taskApi} from \"../api/api\";\n\nexport const changeFilter = activeFilter => ({\n    type: CHANGE_FILTER,\n    activeFilter,\n})\n\nexport const getTasks = (payload) => ({\n    type: GET_TASKS,\n    payload,\n})\n\nexport const setCurrentPage = (currentPage) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage,\n})\n\nexport const setUserData = (login, token, isAuth) => ({\n    type: SET_USER_DATA,\n    login,\n    token,\n    isAuth,\n})\n\nexport const errorLogin = (payload) => ({\n    type: ERROR_LOGIN,\n    payload,\n})\n\nexport const errorData = (payload) => ({\n    type: ERROR_DATA,\n    payload,\n})\n\n\n\n//redux-thunk\nexport const getTasksThunkCreator = (PageNumber = 1) => async (dispatch) => {\n    dispatch(setCurrentPage(PageNumber))\n    const response = await taskApi.getTasks(PageNumber)\n    response.status === 'ok'\n        ? dispatch(getTasks(response.message))\n        : console.error(response.message)\n}\n\nexport const addNewTaskThunkCreator = (usernameInp, emailInp, textTaskInp) => async (dispatch) =>  {\n    debugger\n    let form = new FormData()\n    form.append(\"username\", usernameInp)\n    form.append(\"email\", emailInp)\n    form.append(\"text\", textTaskInp)\n\n    const response = await taskApi.addNewTask(form)\n\n    response.status === 'ok'\n        ? dispatch(getTasksThunkCreator())\n        : dispatch(errorData(response.message))\n}\n\nexport const saveEditTaskThunkCreator = (id, textTaskInp, status, token, currentPage) => async (dispatch) => {\n    status ? status = 10 : status = 0;\n    let form = new FormData()\n    form.append(\"text\", textTaskInp)\n    form.append(\"status\", status)\n    form.append(\"token\", token)\n    debugger\n    const response = await taskApi.saveEditTask(id, form)\n    response.status === 'ok'\n        ? dispatch(getTasksThunkCreator(currentPage))\n        : dispatch(errorData(response.message))\n}\n\nexport const loginThunkCreator = (login = 'admin', password = '123') => async (dispatch) => {\n    let form = new FormData()\n    form.append(\"username\", login)\n    form.append(\"password\", password)\n\n    const response = await authApi.login(form)\n    response.status === 'ok'\n        ? dispatch(setUserData(login, response.message.token, true))\n        : dispatch(errorLogin(response.message))\n}\n\n\n\n\n\n","export const CHANGE_FILTER = 'CHANGE_FILTER';\nexport const GET_TASKS = 'GET_TASKS';\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nexport const GET_SORT_TASKS = 'GET_SORT_TASKS';\nexport const SET_USER_DATA = 'SET_USER_DATA';\nexport const ERROR_LOGIN = 'ERROR_LOGIN';\nexport const ERROR_DATA = 'ERROR_DATA';\n\n","import React from \"react\";\n\nimport './loginForm.css'\n\nconst LoginForm = ({onClickFormLoginBtn, loginInput, pasInput, handlerInputChange, errorData}) => (\n    <form className='tasks__loginForm' onSubmit={onClickFormLoginBtn} >\n            {errorData &&\n                 <div className='textError'>\n                        {errorData}\n                </div>\n            }\n            <div className='tasks__loginForm__content'>\n                <input\n                    className={errorData\n                        ? 'tasks__loginForm__input tasks__loginForm__login error'\n                        : 'tasks__loginForm__input tasks__loginForm__login'}\n                    name='loginInput'\n                    placeholder='Логин'\n                    onChange={handlerInputChange}\n                    value={loginInput}\n                />\n                <input\n                    className={errorData\n                        ? 'tasks__loginForm__input tasks__loginForm__password error'\n                        : 'tasks__loginForm__input tasks__loginForm__password'}\n                    name='pasInput'\n                    type='password'\n                    placeholder='Пароль'\n                    onChange={handlerInputChange}\n                    value={pasInput}\n                />\n                <button className='primaryBtn' type='submit'>Войти</button>\n        </div>\n\n    </form>\n)\n\nexport default LoginForm;\n","import React from \"react\";\n\nimport LoginForm from \"../../components/login/loginForm\";\n\nconst Login = ({isAuth, login, onClickFormLoginBtn, onClickLoginBtn, loginInput, pasInput, handlerInputChange, errorLogin}) => (\n\n    <div className='tasks__authorization'>\n        { !isAuth && <button\n            className='tasks__authorization__autoLogin primaryBtn'\n            title='Автоматически заполняться \"Логин\" и \"Пароль\", если забыли(не знали)'\n            onClick={onClickLoginBtn}\n        >Авто вход</button>}\n        {isAuth\n            ? <span>Приветствую {login}</span>\n            : <LoginForm\n                onClickFormLoginBtn={onClickFormLoginBtn}\n                loginInput={loginInput}\n                pasInput={pasInput}\n                handlerInputChange={handlerInputChange}\n                errorData={errorLogin}\n            />\n        }\n    </div>\n)\n\nexport default Login;\n","import React from \"react\";\n\nconst FormAddNewTask = ({ state, errorData, addTask, handlerInputChange }) => (\n    <form className='tr' onSubmit={addTask}>\n        <div className='td'>\n            <input\n                className={errorData.username\n                    ? 'tasks__list__input tasks__list__username error '\n                    : 'tasks__list__input tasks__list__username'}\n                name='usernameInp'\n                placeholder='Имя пользователя'\n                onChange={handlerInputChange}\n                value={state.usernameInp}\n            />{errorData.username && <label className='textError'>{errorData.username}</label>}\n        </div>\n        <div className='td'>\n            <input\n                className={errorData.email\n                    ? 'tasks__list__input tasks__list__email error '\n                    : 'tasks__list__input tasks__list__email'}\n                name='emailInp'\n                placeholder='Почта'\n                onChange={handlerInputChange}\n                value={state.emailInp}\n            />{errorData.email && <label className='textError'>{errorData.email}</label>}\n        </div>\n        <div className='td'>\n            <input\n                className={errorData.text\n                    ? 'tasks__list__input tasks__list__textTask error'\n                    : 'tasks__list__input tasks__list__textTask'}\n                name='textTaskInp'\n                placeholder='Текст новой задачи'\n                onChange={handlerInputChange}\n                value={state.textTaskInp}\n            />{errorData.text && <label className='textError'>{errorData.text}</label>}\n        </div>\n        <div className='td'></div>\n        <div className='td'>\n            <button className='primaryBtn' type='submit' title='Добавить новую задачу'>Добавить</button>\n        </div>\n    </form>\n);\n\nexport default FormAddNewTask;\n\n\n\n\n\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport iconEdit from '../../assets/images/edit_icon.png'\nimport iconSave from '../../assets/images/save_icon.png'\n\nimport './task-item.css'\n\n\nconst TaskItem = ({ id, username, text, email, status, isAuth, saveEditTask, state, handlerInputChange, handlerEditMode }) => (\n\n    <div className={ status ? 'completed text tr' : 'text tr'}>\n        {/*<div className='td'>{id}</div>*/}\n        <div className='td'>{username}</div>\n        <div className='td'>{email}</div>\n        { (state.isEditMode && id === state.idEditTask)\n            ? <div className='td'>\n                    <input\n                        className='tasks__list__input tasks__list__textTask'\n                        name='textTaskInp'\n                        placeholder='Текст новой задачи'\n                        onChange={handlerInputChange}\n                        value={state.textTaskInp}\n                    />\n                </div>\n            : <div className='td'>{text}</div>\n        }\n        { (state.isEditMode && id === state.idEditTask )\n            ? <div className='td'>\n                <input\n                    type='checkbox'\n                    name='status'\n                    title='Выполнено?'\n                    onChange={handlerInputChange}\n                    checked={state.status}\n                />\n            </div>\n            : <div className='td'>\n                <input\n                    type='checkbox'\n                    name='status'\n                    title='Выполнено?'\n                    onChange={handlerInputChange}\n                    checked={status}\n                    disabled\n                />\n            </div>\n        }\n        {   isAuth ?\n            (state.isEditMode && id === state.idEditTask)\n                ? <div className='td'>\n                    <img className='save-icon' src={iconSave} onClick={() => saveEditTask(id)}></img>\n                    </div>\n                : <div className='td'>\n                    <img className='edit-icon' src={iconEdit} onClick={() => handlerEditMode(id, username, email, text, status)}></img>\n\n                    </div>\n            :  <span></span>\n        }\n    </div>\n);\n\nTaskItem.propTypes = {\n    id: PropTypes.number,\n    username: PropTypes.string,\n    email: PropTypes.string,\n    text: PropTypes.string,\n    status: PropTypes.bool,\n    isAuth: PropTypes.bool,\n    saveEditTask: PropTypes.func,\n    handlerInputChange: PropTypes.func,\n    handlerEditMode: PropTypes.func,\n\n}\n\nTaskItem.defaultProps = {\n    id: '',\n    username: '',\n    email: '',\n    text: '',\n    status: false,\n    isAuth: false,\n    saveEditTask: () => {},\n    handlerInputChange: () => {},\n    handlerEditMode: () => {},\n}\n\nexport default TaskItem;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './task-list.css';\n \nimport FormAddNewTask from './FormAddNewTask';\nimport TaskItem from \"../item-task/task-item\";\n\nconst TaskList = ({tasks, addTask, errorData, saveEditTask, isAuth, state,\n                      changeAddTaskMode, handlerInputChange, handlerEditMode}) => (\n\n    <div  className='tasks__list table'>\n        <div className='tr'>\n            <div className='th'>{'Пользователь'}</div>\n            <div className='th'>{'Email'}</div>\n            <div className='th'>{'Текст задачи'}</div>\n            <div className='th'>{`Выполенено`}</div>\n            {isAuth && <div className='th'>{'Действия'}</div>}\n        </div>\n        {tasks.map( ({id, username, text, email, status} ) => (\n                <TaskItem id={id}\n                          username={username}\n                          text={text}\n                          email={email}\n                          status={status}\n                          isAuth={isAuth}\n                          saveEditTask={saveEditTask}\n                          state={state}\n                          handlerInputChange={handlerInputChange}\n                          handlerEditMode={handlerEditMode}\n                />\n            )\n        )}\n        {!state.isAddNewTask //  добавления новой задачи (форма добавления)\n            ? <div>\n                <button\n                    className='tasks__list__newTask primaryBtn'\n                    onClick={() => changeAddTaskMode()}\n                    title='Добавить новую задачу'>Добавить задачу\n                </button>\n                <span className='tasks__list__infoLabel'></span>\n            </div>\n            : <FormAddNewTask state={state} errorData={errorData} addTask={addTask} handlerInputChange={handlerInputChange}/>\n        }\n    </div>\n\n\n)\n\nTaskList.propTypes = {\n    tasks: PropTypes.array,\n    addTask: PropTypes.func,\n    addNewTaskInput: PropTypes.func,\n    saveEditTask: PropTypes.func,\n    handlerInputChange: PropTypes.func,\n    handlerEditMode: PropTypes.func,\n    isAddNewTask: PropTypes.bool,\n    isAuth: PropTypes.bool,\n}\n\nTaskList.defaultProps = {\n    tasks: [],\n    addTask: () => {},\n    addNewTaskInput: () => {},\n    saveEditTask: () => {},\n    handlerInputChange: () => {},\n    handlerEditMode: () => {},\n    isAddNewTask: false,\n    isAuth: false,\n}\n\n\nexport default TaskList;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './footer.css';\n\nconst FILTER_BTN = [\n    {\n        id: 'all',\n        text: 'Все'\n    },\n    {\n        id: 'active',\n        text: 'Активные'\n    },\n    {\n        id: 'completed',\n        text: 'Выполненые'\n    },\n]\n\nconst Footer = ({totalTaskCount, activeFilter, changeFilter}) => (\n    <div className='footer'>\n        <span className='footer__amount__task'>{`Всего: ${totalTaskCount} `}</span>\n        <div className='footer__filter'>\n            {FILTER_BTN.map( ({id, text}) => (\n                <button\n                    onClick={ () => {changeFilter(id)}}\n                    key={id}\n                    className={id === activeFilter ? 'footer__filter__btn active' : 'footer__filter__btn'}>\n                {text}</button>\n                )\n            )}\n        </div>\n    </div>\n)\nFooter.propTypes = {\n    totalTaskCount: PropTypes.number,\n    activeFilter: PropTypes.func,\n    changeFilter: PropTypes.func,\n}\n\nFooter.defaultProp = {\n    totalTaskCount: 0,\n    activeFilter: () => {},\n    changeFilter: () => {},\n}\n\n\nexport default Footer;\n","import React from \"react\";\n\nimport navNext from '../../assets/images/nav_next.png'\nimport navBefore from '../../assets/images/nav_before.png'\nimport './pagination.css'\n\n\nconst Pagination = ({pages, stepNumber, setStepNumber, stepCount, leftStepPageNumber, rightStepPageNumber, currentPage, onPageChange}) => {\n\n    return <div className=\"tasks__pagination\">\n        <div className='tasks__pagination__content'>\n            {stepNumber > 1 &&\n                <button className='tasks__pagination__btn' src={navBefore} onClick={() => {\n                    setStepNumber(stepNumber - 1)\n                }}>\n                    <img src={navBefore} />\n                </button>\n            }\n            {pages\n                .filter(p => p >= leftStepPageNumber && p <= rightStepPageNumber)\n                .map((p) => {\n                    return <span\n                        className={currentPage === p ? 'tasks_pagination_item selectedPage' : 'tasks_pagination_item'}\n                        key={p}\n                        onClick={() => {\n                            onPageChange(p)\n                        }}\n                    >{p}</span>\n                })\n            }\n            {stepCount > stepNumber &&\n            <button className='tasks__pagination__btn' onClick={() => {\n                setStepNumber(stepNumber + 1)\n            }}>\n                <img src={navNext}/>\n            </button>\n            }\n        </div>\n    </div>\n}\n\nexport default Pagination;\n","import React, {useState} from \"react\";\nimport {connect} from 'react-redux';\n\nimport Pagination from \"./pagination\";\n\n\nconst PaginationContainer = ({ pageSize, totalTaskCount, currentPage, onPageChange, stepSizes = 10}) => {\n    // подсчет общего количества страниц\n    let pagesCount = Math.ceil(totalTaskCount / pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    //подсчет общего количество шагов по 10 страниц\n    let stepCount = Math.ceil(pagesCount / stepSizes)\n    let [stepNumber, setStepNumber] = useState(1)\n\n    let leftStepPageNumber = (stepNumber - 1) * stepSizes + 1\n    let rightStepPageNumber = stepNumber * stepSizes\n\n    let arrPage = {}\n    for (let i = 1; i <= pagesCount; i++) {\n        arrPage = {\n            i: i,\n        }\n    }\n    return (\n        <Pagination\n            pages={pages}\n            stepCount={stepCount}\n            stepNumber={stepNumber}\n            setStepNumber={setStepNumber}\n            leftStepPageNumber={leftStepPageNumber}\n            rightStepPageNumber={rightStepPageNumber}\n            currentPage={currentPage}\n            onPageChange={onPageChange}\n        />\n    )\n\n}\n\nexport default connect(\n    (store) => ({\n        pageSize: store.taskReducer.pageSize,\n        totalTaskCount: store.taskReducer.totalTaskCount,\n    })\n)(PaginationContainer);\n","import React from \"react\";\n\nimport Login from \"../login/login\";\nimport TaskList from '../task-list/task-list';\nimport Footer from '../footer/footer';\nimport PaginationContainer from \"../pagination/pagination-container\";\n\nimport './task.css'\n\nconst Task = ({\n                  props, state, onClickFormLoginBtn, onClickLoginBtn, addTask, saveEditTask,\n                  filterTasks, handlerInputChange, changeAddTaskMode, handlerEditMode, onPageChange\n              }) =>\n    {\n    const {tasks, filterReducer, isAuth} = props;\n    const isTasksExist = tasks && tasks.length > 0;\n    const filteredTasks = filterTasks(tasks, filterReducer);\n    return (\n        <div className='tasks__content'>\n            <Login\n                isAuth={isAuth}\n                login={props.login}\n                onClickFormLoginBtn={onClickFormLoginBtn}\n                onClickLoginBtn={onClickLoginBtn}\n                loginInput={state.loginInput}\n                pasInput={state.pasInput}\n                handlerInputChange={handlerInputChange}\n                errorLogin={props.errorLogin}\n            />\n            {isTasksExist && <TaskList\n                tasks={filteredTasks}\n                addTask={addTask}\n                saveEditTask={saveEditTask}\n                isAuth={isAuth}\n                state={state}\n                changeAddTaskMode={changeAddTaskMode}\n                handlerInputChange={handlerInputChange}\n                handlerEditMode={handlerEditMode}\n                errorData={props.errorData}\n            />}\n\n            <PaginationContainer\n                currentPage={props.currentPage}\n                onPageChange={onPageChange}\n            />\n            <Footer\n                totalTaskCount={props.totalTaskCount}\n                activeFilter={filterReducer}\n                changeFilter={props.changeFilter}\n            />\n        </div>\n    )\n}\n\nexport default Task;\n","import React, {Component} from \"react\";\nimport {connect} from 'react-redux';\n\nimport {\n    changeFilter,\n    getTasksThunkCreator,\n    addNewTaskThunkCreator,\n    loginThunkCreator,\n    saveEditTaskThunkCreator\n} from \"../../actions/actionCreator\";\nimport Task from \"./task\";\n\n\nclass TaskContainer extends Component {\n\n    state = {\n        isEditMode: false,\n        idEditTask: '',\n        isAddNewTask: false,\n        usernameInp: '',\n        emailInp: '',\n        textTaskInp: '',\n        status: 0,\n        loginInput: '',\n        pasInput: '',\n    }\n\n    initializeState = () => {\n        this.setState({\n            isEditMode: false,\n            idEditTask: '',\n            isAddNewTask: false,\n            usernameInp: '',\n            emailInp: '',\n            textTaskInp: '',\n            status: 0,\n        })\n    }\n\n    handlerEditMode = (id, username, email, text, status) => {\n        let {isEditMode} = this.state\n        this.setState({\n            isEditMode: !isEditMode,\n            idEditTask: id,\n            usernameInp: username,\n            emailInp: email,\n            textTaskInp: text,\n            status: status,\n        })\n    }\n\n// обработчик на изменения значения в input всех\n    handlerInputChange = ({target: {type, value, name, checked}}) => {\n        this.setState({[name]: type === 'checkbox' ? checked : value})\n    }\n\n// Фильтрация списка задач по активному фильтру\n    filterTasks = (tasks, activeFilter) => {\n        switch (activeFilter) {\n            case 'completed':\n                return tasks.filter(tasks => tasks.status)\n                break;\n            case 'active':\n                return tasks.filter(tasks => !tasks.status)\n                break;\n            default:\n                return tasks;\n        }\n    }\n\n    changeAddTaskMode = () => {\n        let {isAddNewTask} = this.state;\n        this.setState({\n            isAddNewTask: !isAddNewTask,\n        })\n    }\n\n    addTask = (event) => {\n        event.preventDefault();\n        this.props.addNewTaskThunkCreator(this.state.usernameInp, this.state.emailInp, this.state.textTaskInp)\n    }\n\n    saveEditTask = (id) => {\n        this.props.saveEditTaskThunkCreator(id, this.state.textTaskInp, this.state.status, this.props.token, this.props.currentPage)\n        this.initializeState()\n    }\n\n// обработчик нажатия кнопки \"Авто вход\"\n    onClickLoginBtn = () => {\n        this.setState({\n            loginInput: 'admin',\n            pasInput: '123',\n        })\n    }\n\n// обработчик нажатия кнопки \"Войти\"\n    onClickFormLoginBtn = (event) => {\n        event.preventDefault()\n        this.props.loginThunkCreator(this.state.loginInput, this.state.pasInput)\n    }\n\n// переключение страниц и получения новых данных с API\n    onPageChange = (pageNumber) => {\n        this.props.getTasksThunkCreator(pageNumber)\n    }\n\n    componentDidMount() {\n        this.props.getTasksThunkCreator(this.props.currentPage)\n    }\n\n    render() {\n        return (\n            <Task\n                props={this.props}\n                state={this.state}\n                onClickFormLoginBtn={this.onClickFormLoginBtn}\n                onClickLoginBtn={this.onClickLoginBtn}\n                addTask={this.addTask}\n                saveEditTask={this.saveEditTask}\n                filterTasks={this.filterTasks}\n                handlerInputChange={this.handlerInputChange}\n                handlerEditMode={this.handlerEditMode}\n                changeAddTaskMode={this.changeAddTaskMode}\n                onPageChange={this.onPageChange}\n            />\n        )\n    }\n}\n\nexport default connect((store) => ({\n    tasks: store.taskReducer.tasks,\n    isAddNewTask: store.taskReducer.isAddNewTask,\n    currentPage: store.taskReducer.currentPage,\n    errorData: store.taskReducer.errorData,\n    totalTaskCount: store.taskReducer.totalTaskCount,\n    filterReducer: store.filterReducer,\n    isAuth: store.authReducer.isAuth,\n    login: store.authReducer.login,\n    token: store.authReducer.token,\n    errorLogin: store.authReducer.errorLogin,\n}), {\n    changeFilter, getTasksThunkCreator, addNewTaskThunkCreator,\n    loginThunkCreator, saveEditTaskThunkCreator\n})(TaskContainer);\n","import React, { Fragment } from 'react';\n\n\nimport './App.css';\n\nimport Title from './components/title/title'\nimport TaskContainer from \"./components/task/task-container\";\n\nconst App = () => (\n  <Fragment>\n      <div className='tasks'>\n          <Title title='Список задач'/>\n          <TaskContainer />\n      </div>\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SET_CURRENT_PAGE, GET_TASKS, ERROR_DATA} from \"../constants\";\n\n\nconst TASKS_start = {\n    tasks:[\n            {\n                id: 1,\n                username: 'Max',\n                text: 'Learn ReactJS',\n                email: 'da12@mail.ru',\n                status: 0,\n            },\n            {\n                id: 2,\n                username: 'Anton',\n                text: 'Learn Redux',\n                email: 'da44@mail.ru',\n                status: 0,\n            },\n            {\n                id: 3,\n                username: 'Marina',\n                text: 'Learn React Router',\n                email: 'dasd@mail.ru',\n                status: 0,\n            }\n    ],\n    errorData: {\n        username: null,\n        email: null,\n        text: null,\n        token: null\n    },\n    currentPage: 1,\n    pageSize: 3,\n    totalTaskCount: 0,\n}\n\nconst taskReducer = (state = TASKS_start, action ) => {\n    switch (action.type) {\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case GET_TASKS:\n            return {\n                ...state,\n                tasks: action.payload.tasks,\n                totalTaskCount: action.payload.total_task_count,\n            }\n        case ERROR_DATA:\n            return {\n                ...state,\n                errorData: action.payload\n            }\n        default:\n            return state;\n    }\n};\n\nexport default taskReducer;\n","import {CHANGE_FILTER} from \"../constants\";\n\nconst BASE_FILTER = 'all';\n\nconst filterReducer = (state = BASE_FILTER, { type, activeFilter}) => {\n    switch (type) {\n        case CHANGE_FILTER:\n            return activeFilter;\n            break;\n        default:\n            return state;\n    }\n}\n\nexport default filterReducer;\n","import {SET_USER_DATA, ERROR_LOGIN} from \"../constants\";\n\nconst initialState = {\n    login: null,\n    token: null,\n    isAuth: false,\n    errorLogin: null,\n}\n\nconst authReducer = (state = initialState, action ) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action,\n            }\n        case ERROR_LOGIN:\n            return {\n                ...state,\n                errorLogin: action.payload.password,\n            }\n        default:\n            return state;\n    }\n};\n\nexport default authReducer;\n","import { combineReducers } from 'redux';\n\nimport taskReducer from './taskReducer';\nimport filterReducer from './filterReducer';\nimport authReducer from \"./authReducer\";\n\nconst rootReducer = combineReducers({ taskReducer, filterReducer, authReducer});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/index';\nimport thunkMiddleware from 'redux-thunk';\nimport { save } from 'redux-localstorage-simple'\n\n/* eslint-disable no-underscore-dangle */\nconst composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n/* eslint-enable */\n\n        // Видео webdev курс сохрание на локалке в сторе\n// const configureStore = preloadedState => (\n//     createStore(\n//         rootReducer,\n//         preloadedState,\n//         composeEnhancers(\n//             applyMiddleware(save ({ namespace: 'task-list'}))\n//         ),\n//     )\n// );\n\n//const store = configureStore({});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nwindow.store = store;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}